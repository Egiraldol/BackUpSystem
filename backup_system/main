from core.file_selector import obtener_todos_los_archivos
from core.compressor import comprimir_archivos_en_zip
from encryption.aes_encryptor import encriptar_archivo
from storage.local_copy import copiar_a_disco_externo
from storage.cloud_upload import subir_a_google_drive
from storage.fragmenter import fragmentar_archivo
from restore.restore_backup import restaurar_backup
from tkinter import filedialog, Tk
import dask
import os

Tk().withdraw()

def seleccionar_carpetas() -> list:
    carpetas = []
    while True:
        carpeta = filedialog.askdirectory(title="Selecciona una carpeta (Cancelar para terminar)")
        if carpeta:
            carpetas.append(carpeta)
        else:
            break
    return carpetas

def crear_backup():
    carpetas = seleccionar_carpetas()
    if not carpetas:
        print("No se seleccionaron carpetas.")
        return

    archivos = []
    for carpeta in carpetas:
        archivos.extend(obtener_todos_los_archivos([carpeta]))

    nombre_backup = filedialog.asksaveasfilename(defaultextension=".zip", filetypes=[("ZIP files", "*.zip")])
    if not nombre_backup:
        print("No se especificó archivo de salida.")
        return

    carpeta_base = os.path.commonpath(carpetas)
    comprimir_archivos_en_zip(archivos, carpeta_base, nombre_backup)

    print(f"Backup comprimido creado en: {nombre_backup}")
    return nombre_backup

def encriptar(nombre_backup):
    clave_usuario = input("Introduce una contraseña segura: ")
    archivo_encriptado = nombre_backup + ".enc"
    tarea = encriptar_archivo(nombre_backup, archivo_encriptado, clave_usuario)
    dask.compute(tarea)
    print(f"Backup encriptado guardado en: {archivo_encriptado}")
    return archivo_encriptado

def menu():
    archivo_backup = None
    archivo_encriptado = None

    while True:
        print("\n--- Menú del Sistema de Backup ---")
        print("1. Crear Backup")
        print("2. Encriptar Backup")
        print("3. Copiar a Disco Externo")
        print("4. Subir a Google Drive")
        print("5. Fragmentar para USB")
        print("6. Restaurar Backup")
        print("7. Salir")

        opcion = input("Selecciona una opción: ").strip()

        if opcion == "1":
            archivo_backup = crear_backup()
        elif opcion == "2":
            if archivo_backup:
                archivo_encriptado = encriptar(archivo_backup)
            else:
                print("Primero debes crear un backup.")
        elif opcion == "3":
            ruta = archivo_encriptado if archivo_encriptado else archivo_backup
            if ruta:
                destino = copiar_a_disco_externo(ruta)
                if destino:
                    print(f"Archivo copiado a: {destino}")
            else:
                print("No hay archivo disponible para copiar.")
        elif opcion == "4":
            ruta = archivo_encriptado if archivo_encriptado else archivo_backup
            if ruta:
                nombre_drive = subir_a_google_drive(ruta)
                print(f"Archivo subido a Google Drive como: {nombre_drive}")
            else:
                print("No hay archivo disponible para subir.")
        elif opcion == "5":
            ruta = archivo_encriptado if archivo_encriptado else archivo_backup
            if ruta:
                tamano = int(input("Tamaño máximo por fragmento (en MB): "))
                destino = filedialog.askdirectory(title="Selecciona carpeta donde guardar los fragmentos")
                if destino:
                    fragmentar_archivo(ruta, tamano, destino)
                    print(f"Archivo fragmentado y guardado en: {destino}")
            else:
                print("No hay archivo disponible para fragmentar.")
        elif opcion == "6":
            restaurar_backup()
        elif opcion == "7":
            print("Saliendo del sistema.")
            break
        else:
            print("Opción inválida.")

if __name__ == "__main__":
    menu()
